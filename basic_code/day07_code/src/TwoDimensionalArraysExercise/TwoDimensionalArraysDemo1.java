package TwoDimensionalArraysExercise;

/**
 * 二维数组静态初始化格式: 数据类型[][] 数组名 = new 数据类型[][] {{元素1,元素2,},{元素1,元素2}};
 *            简化格式: 数据类型[][] 数组名 = {{元素1,元素2,},{元素1,元素2}};
 * 元素访问: 数组名[索引][索引];
 * 二维数组遍历: 先得到一维数组,再遍历一维数组获取元素
 */
public class TwoDimensionalArraysDemo1 {
    public static void main(String[] args) {
        // 1. 二维数组静态初始化格式
        int[][] array1 = new int[][] {{1,2,3},{4,5,6,7,8}};  // 完整格式
        int[][] array2 = {{21,22,23},{34,35,36,37,38}};  // 简化格式
        // 以后建议用下面这种格式,把每一个一维数组单独写成一行.
        // 注意: NOTE 每一个一维数组其实是二维数组中的元素,所以每一个一维数组之间需要用逗号隔开.最后一个一维数组后面不需要加逗号.
        int[][] array3 = {
                {11,22,33},
                {44,55,66,77,88}
        };
        // 2. 获取元素
        // System.out.println(array3[0]);  // array3[0]此刻表示获取二维数组中的第一个一维数组的地址值
        // System.out.println(array3[0][0]);  // array3[0][0]表示获取第一个一位数组中0索引的元素.

        // 3. 二维数组遍历--通过循环嵌套实现
        for (int i = 0; i < array3.length; i++) {  // 外循环: 遍历二维数组,得到里面的每一个一维数组.
            // i:表示二维数组中的每一个索引
            // array3[i] 表示二维数组中的每一个元素(即一维数组)
            for (int j = 0; j < array3[i].length; j++) {  // 内循环:遍历一维数组,得到里面的每一个元素.
                // j:表示一维数组中的每一个元素
                System.out.print(array3[i][j] + " ");
            }
            System.out.println(); // 内循环结束时进行单独换行,实现每一个一维数组占一行
        }

    }
}
